
# Copyright 2025 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Imports

load("@ros//:defs.bzl", "ros_interface", "ros_data")
load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")
load("@rosidl_generator_c//:rules.bzl", "c_ros_library")
load("@rosidl_generator_cpp//:rules.bzl", "cc_ros_library")

package(default_visibility = ["//visibility:public"])

# Interfaces

ros_interface(
    name = "msg__Gid",
    src = "msg/Gid.msg",
)

ros_interface(
    name = "msg__NodeEntitiesInfo",
    src = "msg/NodeEntitiesInfo.msg",
    deps = [
        ":msg__Gid",
    ],
)

ros_interface(
    name = "msg__ParticipantEntitiesInfo",
    src = "msg/ParticipantEntitiesInfo.msg",
    deps = [
        ":msg__Gid",
        ":msg__NodeEntitiesInfo",
    ],
)

cc_ros_library(
    name = "cc_msgs",
    deps = [
        ":msg__Gid",
        ":msg__NodeEntitiesInfo",
        ":msg__ParticipantEntitiesInfo",
    ],
)

# Libraries

cc_library(
    name = "rmw_dds_common",
    srcs = glob(["src/**/*.cpp"]),
    hdrs = glob([
        "include/**/*.h",
        "include/**/*.hpp"
    ]),
    includes = ["include"],
    local_defines = ["ROS_PACKAGE_NAME=\\\"rmw_dds_common\\\""],
    linkopts = ["-ldl", "-rdynamic"],
    deps = [
        "@rcpputils",
        "@rcutils",
        "@rmw",
        "@rmw_security_common",
        "@rosidl_runtime_c",
        "@rosidl_runtime_cpp",
        ":cc_msgs",
    ],
)

# ROS C/C++ binaries

cc_test(
    name = "benchmark_graph_cache",
    srcs = ["test/benchmark/benchmark_graph_cache.cpp"],
    includes = ["include"],
    deps = [
        "@google_benchmark//:benchmark_main",
        "@osrf_testing_tools_cpp//:memory_tools",
        "@performance_test_fixture",
        "@rcutils",
        "@rmw",
        "@rmw_security_common",
        "@rosidl_runtime_c",
        "@rosidl_runtime_cpp",
        ":rmw_dds_common",
    ],
    timeout = "short"
)

[
    cc_test(
        name = test,
        visibility = ["//visibility:public"],
        srcs = [
            "test/allocator_testing_utils.h",
            "test/" + test + ".cpp"
        ],
        deps = [
            "@googletest//:gtest",
            "@googletest//:gtest_main",
            "@osrf_testing_tools_cpp//:memory_tools",
            "@rcpputils",
            "@rcutils",
            "@rmw",
            "@rmw_security_common",
            "@rosidl_runtime_c",
            "@rosidl_runtime_cpp",
            ":rmw_dds_common",
        ],
        timeout = "short"
    )
    for test in [
        "test_gid_utils",
        "test_graph_cache",
        "test_qos",
        "test_time_utils",
    ]
]
