load("@crates//:defs.bzl", "all_crate_deps")
load("@rules_cc//cc:defs.bzl", "cc_library")
load("@rules_rust//cargo:defs.bzl", "cargo_build_script",  "cargo_toml_env_vars", "cargo_bootstrap_repository")
load("@rules_rust//rust:defs.bzl", "rust_binary", "rust_library", "rust_shared_library")

load(":tools.bzl", "multi_test", "cargo_build_stdout_capture")

# These are the zenoh features we'd like to include in this build. I realize this list is missing
# shared memory as a feature. For some reason when I enable this I get the following error:
# error[E0512]: cannot transmute between types of different sizes, or dependently-sized types

FEATURES = [
    "shared-memory",
    "transport_compression",
    "transport_tcp",
    "transport_udp",
    "transport_tls",
    "unstable"
]

# The zenoh-c project has an unusual way of building. An outer cargo build calls an inner cargo build
# with a 'panic' feature enabled. This prints out information about type sizes to a text file called 
# '.build_resources_opaque_types.txt' based on the chosen zenoh feature set. The rule below
# mimics the call to the inner stdout in order to replicate this behavior. It would be nice to have
# this use the "streams" output group, but using this requires --keep_going (to ignore the non-zero
# return code from the panic) and --@rules_rust//cargo/settings:debug_std_streams_output_group set to
# true. It's easier to just wrap an ctx.actions.run_shell(...) to handle this.

cargo_build_stdout_capture(
    name = "generate_build_resources_opaque_types",
    manifest = "build-resources/opaque-types/Cargo.toml",
    cargo_features = FEATURES,
    srcs = glob(["build-resources/opaque-types/**"]),
    out = ".build_resources_opaque_types.txt",
)

# Now that we have our opaque type information we can go ahead and finally call the cargo build
# script. This function calls build.rs to generate the src/opaque_types/mod.rs file and some
# header files to include when using the C interface.

cargo_build_script(
    name = "build_script",
    srcs = glob([
        "src/**/*.rs",
        "buildrs/**/*.rs",
        "build.rs"
    ]),
    data = glob(["**"],
        exclude = [
            "include/**",
            "BUILD.bazel",
            "MODULE.bazel",
            "tools.bzl"
        ]
    ) + [
        ".build_resources_opaque_types.txt",
    ],
    edition = "2021",
    crate_root = "build.rs",
    crate_features = FEATURES,    
    deps = all_crate_deps(build = True, normal = False),
    rustc_env = {
        "ZENOHC_BUILD_WITH_SHARED_MEMORY": "FALSE",
        "ZENOHC_BUILD_WITH_UNSTABLE_API": "FALSE",
    },
    visibility = ["//visibility:private"],
)

# The cargo build script makes its output products available in the OUTPUT_DIR, which is mapped to the
# bazel output group called "output_dir". Ideally we'd have files as targets here, but the
# cargo_build_script function is agnostic to what happens in the build process, and so there we have to
# hard-code an extractor genrule for each file.

filegroup(
    name = "output_dir",
    output_group = "out_dir",
    srcs = [":build_script"],
)

genrule(
    name = "extract_opaque_types_mod_rs",
    srcs = [":output_dir"],
    outs = ["src/opaque_types/mod.rs"],
    cmd = "cp $(location :output_dir)/src/opaque_types/mod.rs $@",
    visibility = ["//visibility:public"],
)

# Now that we have the opaque types file available we can build the rust static library, which we'll
# need when building the C interface.

rust_library(
    name = "zenohc",
    srcs = glob([
        "buildrs/**/*.rs",
        "src/**/*.rs"
    ]) + [
        "src/opaque_types/mod.rs"
    ],
    deps = all_crate_deps(build = True, normal = True),
    crate_features = FEATURES,
    rustc_flags = [
        "-Ctarget-feature=-crt-static"
    ],
    rustc_env = {
        "ZENOHC_BUILD_WITH_SHARED_MEMORY": "FALSE",
        "ZENOHC_BUILD_WITH_UNSTABLE_API": "FALSE",
    }
)

# Now extract the auto-generated C header files from the cargo build, which we'll bundle into a C
# library that links against the zenohc RUST library. I'm sure there's a better way to extract a
# of header files from a output_group, but I can't seem to work out how....

genrule(
    name = "extract_zenoh_commons",
    srcs = [":output_dir"],
    outs = ["include/zenoh_commons.h"],
    cmd = "cp $(location :output_dir)/include/zenoh_commons.h $@",
    visibility = ["//visibility:public"],
)

genrule(
    name = "extract_zenoh_concrete",
    srcs = [":output_dir"],
    outs = ["include/zenoh_concrete.h"],
    cmd = "cp $(location :output_dir)/include/zenoh_concrete.h $@",
    visibility = ["//visibility:public"],
)

genrule(
    name = "extract_zenoh_configure",
    srcs = [":output_dir"],
    outs = ["include/zenoh_configure.h"],
    cmd = "cp $(location :output_dir)/include/zenoh_configure.h $@",
    visibility = ["//visibility:public"],
)

genrule(
    name = "extract_zenoh_macros",
    srcs = [":output_dir"],
    outs = ["include/zenoh_macros.h"],
    cmd = "cp $(location :output_dir)/include/zenoh_macros.h $@",
    visibility = ["//visibility:public"],
)

genrule(
    name = "extract_zenoh_opaque",
    srcs = [":output_dir"],
    outs = ["include/zenoh_opaque.h"],
    cmd = "cp $(location :output_dir)/include/zenoh_opaque.h $@",
    visibility = ["//visibility:public"],
)

# Finally, we can build the C library!

cc_library(
    name = "zenoh-c",
    hdrs = [
        "include/zenoh.h",
        "include/zenoh_commons.h",
        "include/zenoh_concrete.h",
        "include/zenoh_configure.h",
        "include/zenoh_constants.h",
        "include/zenoh_macros.h",
        "include/zenoh_memory.h",
        "include/zenoh_opaque.h",
    ],
    deps = [":zenohc"],
    includes = ["include"],
    defines = [
        "ZENOHC_BUILD_WITH_SHARED_MEMORY=TRUE",
        "ZENOHC_BUILD_WITH_UNSTABLE_API=TRUE",
    ],
    copts = ["-Wunused-variable"],
    visibility = ["//visibility:public"],
)

# Note that not all tests in zenoh-c pass, even when we build it the regular way with cmake.
# We've only included those that pass in the test suite below.

multi_test(
    size = "small",
    names = [
        "z_api_config_test",
        "z_api_constants",
        "z_api_double_drop_test",
        "z_api_drop_options",
        "z_api_encoding_test",
        "z_api_keyexpr_drop_test",
        "z_api_keyexpr_test",
        "z_api_liveliness",
        "z_api_null_drop_test",
        "z_api_payload_test",
        "z_api_session_test",
        #"z_api_shm_test",
        "z_api_unitinialized_check",
    ],
    copts = [
        "-Wno-unused-variable",
        "-Wno-missing-braces"
    ],
    deps = [
        ":zenoh-c",
    ],
)
